@model IEnumerable<Movies>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Movie List</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }

        .movie-details {
            border: 1px solid #ccc;
            border-radius: 10px;
            padding: 20px;
            max-width: 600px;
            margin: auto;
        }

            .movie-details h2 {
                margin-bottom: 10px;
                color: #333;
            }

            .movie-details p {
                margin: 5px 0;
            }

        .label {
            font-weight: bold;
            color: #555;
        }

        .value {
            color: #333;
        }

        .filter-container {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>

    <h1>Movie List</h1>

    <div class="filter-container">
        <input type="text" id="titleFilter" placeholder="Search by Title" value="@ViewData["SearchTitle"]" />
        <select id="yearFilter" onchange="filterMovies()">
            <option value="">Select Year</option>
            @foreach (var year in ViewBag.Years)
            {
                <option value="@year" @(year.ToString() == ViewData["ReleaseYear"]?.ToString() ? "selected" : "")>@year</option>
            }
        </select>
        <select id="ratingFilter" onchange="filterMovies()">
            <option value="">Select Rating</option>
            @foreach (var rating in ViewBag.Ratings)
            {
                <option value="@rating" @(rating == ViewData["Rating"]?.ToString() ? "selected" : "")>@rating</option>
            }
        </select>
        <select id="typeFilter" onchange="filterMovies()">
            <option value="">Select Type</option>
            @foreach (var type in ViewBag.Types)
            {
                <option value="@type" @(type == ViewData["Type"]?.ToString() ? "selected" : "")>@type</option>
            }
        </select>
        <button onclick="filterMovies()">Filter</button>
        <button onclick="clearFilters()">Clear Filters</button>
    </div>

    @if (!Model.Any())
    {
        <p>No movies available to display.</p>
    }
    else
    {
        <div id="movieList">
            @foreach (var movie in Model)
            {
                <div class="movie-details">
                    <h2>@movie.Title (@movie.ReleaseYear)</h2>
                    <p><span class="label">Type:</span> <span class="value">@movie.Type</span></p>
                    <p><span class="label">Director:</span> <span class="value">@movie.Director</span></p>
                    <p><span class="label">Cast:</span> <span class="value">@movie.Cast</span></p>
                    <p><span class="label">Country:</span> <span class="value">@movie.Country</span></p>
                    <p><span class="label">Date Added:</span> <span class="value">@movie.DateAdded</span></p>
                    <p><span class="label">Rating:</span> <span class="value">@movie.Rating</span></p>
                    <p><span class="label">Duration:</span> <span class="value">@movie.Duration</span></p>
                    <p><span class="label">Category:</span> <span class="value">@movie.ListedIn</span></p>
                    <p><span class="label">Description:</span> <span class="value">@movie.Description</span></p>
                    <!-- Link to add a review -->
                    <a href="@Url.Action("Create", "Review", new { movieId = movie.ShowId })">Add Review</a>
                </div>
            }
        </div>
    }

    <script>
        function filterMovies() {
            const title = document.getElementById('titleFilter').value;
            const year = document.getElementById('yearFilter').value;
            const rating = document.getElementById('ratingFilter').value;
            const type = document.getElementById('typeFilter').value;

            // Build the query string
            let query = '';
            if (title) {
                query += `searchTitle=${encodeURIComponent(title)}&`;
            }
            if (year) {
                query += `releaseYear=${encodeURIComponent(year)}&`;
            }
            if (rating) {
                query += `rating=${encodeURIComponent(rating)}&`;
            }
            if (type) {
                query += `type=${encodeURIComponent(type)}&`;
            }

            // Redirect to the same page with the query string
            window.location.href = `@Url.Action("Index", "Home")?${query}`;
        }

        function clearFilters() {
            document.getElementById('titleFilter').value = '';
            document.getElementById('yearFilter').value = '';
            document.getElementById('ratingFilter').value = '';
            document.getElementById('typeFilter').value = '';

            // Redirect to the Index action to clear query parameters
            window.location.href = '@Url.Action("Index", "Home")';
        }
    </script>

</body>
</html>
